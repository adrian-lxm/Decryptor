<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /4f4f/4H/D/8J/4H4Gf/gAHn/+AH5/////8=
</value>
  </data>
</root>